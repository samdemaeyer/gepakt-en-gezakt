{"version":3,"sources":["components/NavBar.js","sections/Section1.js","sections/Section2.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","src","alt","href","Section1","id","Section2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAkBeA,MAff,WACE,OACE,yBAAKC,UAAU,YACb,yBAAKC,IAAI,4BAA4BC,IAAI,cACzC,yBAAKF,UAAU,aACb,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,oBACA,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,aACA,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,mBACA,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,UACA,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,a,MCqBOI,MA9Bf,WACE,OACE,oCACE,6BAASJ,UAAU,aAAaK,GAAG,aACjC,yBAAKL,UAAU,gBACb,wBAAIA,UAAU,iBAAd,2BACA,6BAASA,UAAU,mBACjB,kqBAWJ,yBAAKC,IAAI,kDAAkDC,IAAI,uBAEjE,6BAASF,UAAU,0BACjB,yBAAKC,IAAI,qCAAqCC,IAAI,SAClD,yBAAKD,IAAI,oDAAoDC,IAAI,SACjE,yBAAKD,IAAI,iDAAiDC,IAAI,SAC9D,yBAAKD,IAAI,oDAAoDC,IAAI,Y,MCA1DI,MAxBf,WACE,OACE,oCACE,6BAASN,UAAU,aAAaK,GAAG,aACjC,wBAAIL,UAAU,iBAAd,2BACA,iCACE,+bAMA,qaAI+E,SCJ1EO,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.333b81ea.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.scss';\n\nfunction NavBar() {\n  return (\n    <nav className=\"main-nav\">\n      <img src=\"gepakt-en-gezakt/logo.png\" alt=\"main-logo\" />\n      <div className=\"nav-items\">\n        <a href=\"#\" className=\"nav-item\">gepakt en gezakt</a>\n        <a href=\"#\" className=\"nav-item\">'t proces</a>\n        <a href=\"#\" className=\"nav-item\">eieren of joeng</a>\n        <a href=\"#\" className=\"nav-item\">zitzak</a>\n        <a href=\"#\" className=\"nav-item\">kussen</a>\n      </div>\n    </nav>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './Section1.scss';\n\nfunction Section1() {\n  return (\n    <>\n      <section className=\"section-bg\" id=\"section-1\">\n        <div className=\"section-left\">\n          <h2 className=\"section-title\">Ik word geire gedragen.</h2>\n          <article className=\"section-article\">\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ante nulla, ultrices in dapibus sed,\n              imperdiet quis ante. Integer ac urna quis tortor tincidunt tempor ac ut elit. Integer eu tortor eget libero\n              tempor hendrerit at a lacus. Integer id mollis ligula. Maecenas at eros ut leo venenatis dictum. Morbi nec\n              blandit tellus, vitae lobortis velit. Phasellus arcu magna, blandit id aliquet in, cursus vel orci. Nam\n              lacus ligula, elementum posuere pretium nec, porttitor ut risus. Nulla semper aliquet varius. Suspendisse at\n              arcu pharetra felis mollis fermentum. Praesent ac quam justo. Praesent auctor nisl in turpis placerat\n              malesuada.\n            </p>\n          </article>\n        </div>\n        <img src=\"gepakt-en-gezakt/section-1/girl-holding-bag.png\" alt=\"Girl olding a bag\" />\n      </section>\n      <section className=\"section-bg img-wrapper\">\n        <img src=\"gepakt-en-gezakt/section-1/bag.jpg\" alt=\"gril\"/>\n        <img src=\"gepakt-en-gezakt/section-1/girl-holding-bag-1.jpg\" alt=\"gril\"/>\n        <img src=\"gepakt-en-gezakt/section-1/girl-waring-bag.jpg\" alt=\"gril\"/>\n        <img src=\"gepakt-en-gezakt/section-1/girl-holding-bag-2.jpg\" alt=\"gril\"/>\n      </section>\n    </>\n  );\n}\n\nexport default Section1;\n","import React from 'react';\nimport './Section2.scss';\n\nfunction Section2() {\n  return (\n    <>\n      <section className=\"section-bg\" id=\"section-2\">\n        <h2 className=\"section-title\">Ik word geire gedragen.</h2>\n        <article>\n          <p>\n            Sed varius ac diam eu hendrerit. Fusce libero orci, volutpat sed magna id, fringilla pulvinar justo. Integer\n            elementum sapien tellus, sit amet pretium leo rhoncus non. Vestibulum a metus finibus purus tristique\n            tristique vel vitae velit. In porta orci vel eros ultricies laoreet. Sed et lacus eget dolor interdum\n            varius. Ut at tortor eleifend, facilisis lacus eget, iaculis nunc. Sed ut quam id risus faucibus congue\n          </p>\n          <p>\n            Aenean vitae molestie purus. Donec congue lacus sed sem dapibus luctus. Morbi lacus ex, sagittis eu orci id,\n            posuere interdum libero. Fusce auctor auctor ligula, sit amet accumsan nisl hendrerit sed. Curabitur\n            volutpat est accumsan leo convallis sodales. Mauris venenatis ante elit, et cursus elit mattis sit amet.\n            Nulla euismod hendrerit dictum. Mauris vel mauris et est auctor ullamcorper.{' '}\n          </p>\n        </article>\n      </section>\n    </>\n  );\n}\n\nexport default Section2;\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport Section1 from './sections/Section1';\nimport Section2 from './sections/Section2';\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <Section1 />\n      <Section2 />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}